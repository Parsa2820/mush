#!/usr/bin/env bash
# This script was generated by bashly 1.0.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
mush_usage() {
  if [[ -n $long_usage ]]; then
    printf "mush - Multi User SSH Helper\n"
    echo

  else
    printf "mush - Multi User SSH Helper\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  mush COMMAND\n"
  printf "  mush [COMMAND] --help | -h\n"
  printf "  mush --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Initialize the mush\n" "init   "
  printf "  %s   Add a new user\n" "useradd"
  printf "  %s   Delete a user\n" "userdel"
  printf "  %s   List all users\n" "list   "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
mush_init_usage() {
  if [[ -n $long_usage ]]; then
    printf "mush init - Initialize the mush\n"
    echo

  else
    printf "mush init - Initialize the mush\n"
    echo

  fi

  printf "Alias: i\n"
  echo

  printf "%s\n" "Usage:"
  printf "  mush init [OPTIONS]\n"
  printf "  mush init --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--force, -f"
    printf "    Force initialization even if the files already exist\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
mush_useradd_usage() {
  if [[ -n $long_usage ]]; then
    printf "mush useradd - Add a new user\n"
    echo

  else
    printf "mush useradd - Add a new user\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "%s\n" "Usage:"
  printf "  mush useradd [OPTIONS]\n"
  printf "  mush useradd --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--username, -u USERNAME"
    printf "    Username of the new user (default: random 16 characters)\n"
    echo

    # :flag.usage
    printf "  %s\n" "--password, -p PASSWORD"
    printf "    Password of the new user (default: random 16 characters)\n"
    echo

    # :flag.usage
    printf "  %s\n" "--expire, -e EXPIRE"
    printf "    Expiration date of the new user (default: 1 month later)\n"
    printf "    Default: $(date -d "+1 month" +%Y-%m-%d)\n"
    echo

    # :flag.usage
    printf "  %s\n" "--traffic, -t TRAFFIC"
    printf "    Traffic limit of the new user in GB\n"
    printf "    Default: 20\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
mush_userdel_usage() {
  if [[ -n $long_usage ]]; then
    printf "mush userdel - Delete a user\n"
    echo

  else
    printf "mush userdel - Delete a user\n"
    echo

  fi

  printf "Alias: d\n"
  echo

  printf "%s\n" "Usage:"
  printf "  mush userdel USERNAME\n"
  printf "  mush userdel --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "USERNAME"
    printf "    Username of the user to delete\n"
    echo

  fi
}

# :command.usage
mush_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "mush list - List all users\n"
    echo

  else
    printf "mush list - List all users\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "Usage:"
  printf "  mush list\n"
  printf "  mush list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
mush_init_command() {
  # src/init_command.sh
  CONFIG_DIR="$HOME/.mush"
  USERS_FILE="$CONFIG_DIR/users.json"
  PORT_FILE="$CONFIG_DIR/port"
  LOG_FILE="$CONFIG_DIR/mush.log"
  CRON_FILE="$CONFIG_DIR/cron.sh"

  force=${args[--force]}

  if [[ -d $CONFIG_DIR && -z $force ]]; then
      echo "Mush is already initialized"
      exit 1
  fi

  if [[ -d $CONFIG_DIR && -n $force ]]; then
      rm -rf $CONFIG_DIR
  fi

  mkdir -p $CONFIG_DIR

  echo "[]" > $USERS_FILE
  echo "3000" > $PORT_FILE
  touch $LOG_FILE
  touch $CRON_FILE
  chmod +x $CRON_FILE
  # TODO: add cron job

  echo "Mush initialized successfully"
}

# :command.function
mush_useradd_command() {
  # src/useradd_command.sh
  CONFIG_DIR="$HOME/.mush"
  USERS_FILE="$CONFIG_DIR/users.json"
  PORT_FILE="$CONFIG_DIR/port"
  LOG_FILE="$CONFIG_DIR/mush.log"
  CRON_FILE="$CONFIG_DIR/cron.sh"

  username=${args[--username]}
  if [[ -z $username ]]; then
      username=$(openssl rand -hex 8)
  fi
  password=${args[--password]}
  if [[ -z $password ]]; then
      password=$(openssl rand -hex 16)
  fi
  expire=${args[--expire]}
  traffic=${args[--traffic]}

  encrypted=$(openssl passwd -1 $password)

  result=$(useradd -e $expire -M -s /bin/true -p $encrypted $username)
  if [[ $result == "useradd: user '$username' already exists" ]]; then
      echo "user already exists"
      exit 1
  fi

  port=$(cat $PORT_FILE)
  echo $((port + 1)) > $PORT_FILE
  echo "Match LocalPort $port" >> /etc/ssh/sshd_config
  echo -e "\tAllowUsers $username" >> /etc/ssh/sshd_config
  # Also open port
  systemctl restart ssh

  iptables -N ssh_$username
  iptables -A OUTPUT -p tcp --sport $port -j ssh_$username
  iptables-save > /etc/iptables/rules.v4

  echo "check($username, $traffic)" >> $CRON_FILE

  echo "User created successfully"
  echo "Username: $username"
  echo "Password: $password"
  echo "Port: $port"

}

# :command.function
mush_userdel_command() {
  # src/userdel_command.sh
  username=${args[username]}

  if [[ -z $username ]]; then
      echo "username is required"
      exit 1
  fi

  userdel -r $username

  rule=$(iptables -S | grep OUTPUT | grep ssh_$username)
  if [[ -n $rule ]]; then
      iptables -D OUTPUT $rule
      iptables -X ssh_$username
      iptables-save > /etc/iptables/rules.v4
  fi

  # TODO: remove lines from cron.sh and sshd_config

  echo "User deleted successfully"

}

# :command.function
mush_list_command() {
  # src/list_command.sh
  KEYWORD="ssh_"

  result=$(iptables -L OUTPUT -n -v)

  echo "$result" | head -n 2
  echo "$result" | grep $KEYWORD

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        mush_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    init | i)
      action="init"
      shift
      mush_init_parse_requirements "$@"
      shift $#
      ;;

    useradd | u)
      action="useradd"
      shift
      mush_useradd_parse_requirements "$@"
      shift $#
      ;;

    userdel | d)
      action="userdel"
      shift
      mush_userdel_parse_requirements "$@"
      shift $#
      ;;

    list | l)
      action="list"
      shift
      mush_list_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      mush_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
mush_init_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        mush_init_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="init"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --force | -f)

        # :flag.case_no_arg
        args['--force']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
mush_useradd_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        mush_useradd_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="useradd"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --username | -u)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--username']="$2"
          shift
          shift
        else
          printf "%s\n" "--username requires an argument: --username, -u USERNAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --password | -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--password']="$2"
          shift
          shift
        else
          printf "%s\n" "--password requires an argument: --password, -p PASSWORD" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --expire | -e)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--expire']="$2"
          shift
          shift
        else
          printf "%s\n" "--expire requires an argument: --expire, -e EXPIRE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --traffic | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--traffic']="$2"
          shift
          shift
        else
          printf "%s\n" "--traffic requires an argument: --traffic, -t TRAFFIC" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--expire']:-} ]] || args['--expire']="$(date -d "+1 month" +%Y-%m-%d)"
  [[ -n ${args['--traffic']:-} ]] || args['--traffic']="20"

}

# :command.parse_requirements
mush_userdel_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        mush_userdel_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="userdel"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['username']+x} ]]; then

          args['username']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['username']+x} ]]; then
    printf "missing required argument: USERNAME\nusage: mush userdel USERNAME\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
mush_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        mush_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "init") mush_init_command ;;
    "useradd") mush_useradd_command ;;
    "userdel") mush_userdel_command ;;
    "list") mush_list_command ;;
  esac
}

initialize
run "$@"
