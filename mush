#!/usr/bin/env bash
# This script was generated by bashly 1.0.2 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
mush_usage() {
  if [[ -n $long_usage ]]; then
    printf "mush - Multi User SSH Helper\n"
    echo

  else
    printf "mush - Multi User SSH Helper\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  mush COMMAND\n"
  printf "  mush [COMMAND] --help | -h\n"
  printf "  mush --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Add a new user\n" "useradd"
  printf "  %s   \n" "test   "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
mush_useradd_usage() {
  if [[ -n $long_usage ]]; then
    printf "mush useradd - Add a new user\n"
    echo

  else
    printf "mush useradd - Add a new user\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "%s\n" "Usage:"
  printf "  mush useradd [OPTIONS]\n"
  printf "  mush useradd --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--username, -u USERNAME"
    printf "    Username of the new user (default: random 16 characters)\n"
    echo

    # :flag.usage
    printf "  %s\n" "--password, -p PASSWORD"
    printf "    Password of the new user (default: random 16 characters)\n"
    echo

    # :flag.usage
    printf "  %s\n" "--expire, -e EXPIRE"
    printf "    Expiration date of the new user (default: 1 month later)\n"
    printf "    Default: $(date -d "+1 month" +%Y-%m-%d)\n"
    echo

    # :flag.usage
    printf "  %s\n" "--traffic, -t TRAFFIC"
    printf "    Traffic limit of the new user\n"
    printf "    Default: 20GB\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
mush_test_usage() {
  if [[ -n $long_usage ]]; then
    printf "mush test\n"
    echo

  else
    printf "mush test\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  mush test\n"
  printf "  mush test --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
mush_useradd_command() {
  # src/useradd_command.sh
  username=${args[--username]}
  if [[ -z $username ]]; then
      username=$(openssl rand -hex 16)
  fi
  password=${args[--password]}
  if [[ -z $password ]]; then
      password=$(openssl rand -hex 16)
  fi
  expire=${args[--expire]}
  traffic=${args[--traffic]}

  encrypted=$(openssl passwd -1 $password)

  result=$(useradd -e $expire -M -s /bin/true -p $encrypted $username)
  if [[ $result == "useradd: user '$username' already exists" ]]; then
      echo "user already exists"
      exit 1
  fi

  echo "User created successfully"
  echo "Username: $username"
  echo "Password: $password"
}

# :command.function
mush_test_command() {
  # src/test_command.sh
  echo "# this file is located in 'src/test_command.sh'"
  echo "# code for 'mush test' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        mush_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    useradd | u)
      action="useradd"
      shift
      mush_useradd_parse_requirements "$@"
      shift $#
      ;;

    test)
      action="test"
      shift
      mush_test_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      mush_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
mush_useradd_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        mush_useradd_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="useradd"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --username | -u)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--username']="$2"
          shift
          shift
        else
          printf "%s\n" "--username requires an argument: --username, -u USERNAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --password | -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--password']="$2"
          shift
          shift
        else
          printf "%s\n" "--password requires an argument: --password, -p PASSWORD" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --expire | -e)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--expire']="$2"
          shift
          shift
        else
          printf "%s\n" "--expire requires an argument: --expire, -e EXPIRE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --traffic | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then

          args['--traffic']="$2"
          shift
          shift
        else
          printf "%s\n" "--traffic requires an argument: --traffic, -t TRAFFIC" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--expire']:-} ]] || args['--expire']="$(date -d "+1 month" +%Y-%m-%d)"
  [[ -n ${args['--traffic']:-} ]] || args['--traffic']="20GB"

}

# :command.parse_requirements
mush_test_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        mush_test_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="test"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "useradd") mush_useradd_command ;;
    "test") mush_test_command ;;
  esac
}

initialize
run "$@"
